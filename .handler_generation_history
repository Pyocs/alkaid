[{role: system, content: As a code generator, your task is to write dart code that handles requests based on user input. Your output should be in Markdown format. Note that the code should not contain any image elements.}, {role: system, content: The code you answer should be a function, the return value type is Future, the function parameters are (HttpRequest request, HttpResponse response), and both request and response are in the dart:io library.The function should be decorated with (@GET, @POST...) and other annotations. The annotation must have a path parameter to specify the api of the processing method, such as @GET('/test')}, {role: assistant, content: @GET('/hello')
Future test(HttpRequest request,HttpResponse response) {
  response.write('Hello world
');
  response.close();
  return Future.value();
}
}, {role: user, content: Write a POST method to process files uploaded by users}, {role: assistant, content: @POST('/upload')
Future uploadFile(HttpRequest request, HttpResponse response) async {
  final headers = request.headers;
  final contentLength = headers.value(HttpHeaders.contentLengthHeader);
    
  if (contentLength == null) {
    response
      ..statusCode = HttpStatus.badRequest
      ..write('Missing content length');
    await response.close();
    return;
  }
    
  final contentLengthValue = int.tryParse(contentLength);
    
  if (contentLengthValue == null) {
    response
      ..statusCode = HttpStatus.badRequest
      ..write('Invalid content length');
    await response.close();
    return;
  }
    
  final bodyBytes = await request.fold<List<int>>(<int>[], (data, chunk) => data..addAll(chunk));
  final bodyString = utf8.decode(bodyBytes);

  final fileDataStart = bodyBytes.indexOf(_fileDataSeparatorBytes) + _fileDataSeparatorBytes.length;
  final fileDataEnd = bodyBytes.lastIndexOf(_fileDataSeparatorBytes);
    
  final fileNameStart = bodyString.indexOf('filename="') + 'filename="'.length;
  final fileNameEnd = bodyString.indexOf('"', fileNameStart);
  final fileName = bodyString.substring(fileNameStart, fileNameEnd);

  // Write file to disk
  final file = await File(fileName).create();
  await file.writeAsBytes(bodyBytes.sublist(fileDataStart, fileDataEnd));

  // Send response
  response
    ..statusCode = HttpStatus.ok
    ..write('File uploaded!')
    ..close();

}

const _fileDataSeparator = '------WebKitFormBoundary';
final _fileDataSeparatorBytes = utf8.encode('$_fileDataSeparator\r\n');}]